// Jenkinsfile for Api-users - 
// Set the tag for the development image: version + build number
def devTag      = "0.0-0"

// Set the tag for the production image: version
def prodTag     = "0.0"
def version
def artifact	= ""
def destApp = "" 
def activeApp = ""

{
  node() {


    properties([
      parameters(
          [
            string(name: 'namespace', defaultValue: 'dev-admin-users', description:'Nombre del proyecto en Openshift'),
            string(name: 'appName', defaultValue: 'api-users', description:'Application name')
          ]
        )
    ])

    echo "Namespace: ${params.namespace}"
    echo "Application name: ${params.appName}"



    stage('Preparing'){
			mvnHome = tool 'M2'

			// Define Maven Command. Make sure it points to the correct
			// settings for our Nexus installation (use the service to
			// bypass the router). The file settings.xml
			// needs to be in the Source Code repository.

			mvnCmd = "${mvnHome}/bin/mvn "


			env.JAVA_HOME=tool 'JDK18'
			env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"
			sh 'java -version'


		}
    
    
    // Checkout Source Code
    stage('Checkout Source') {
	    checkout scm  
      dir("complete/backend-users"){
        def pom = 'pom.xml'
        version = getVersionFromPom(pom)
        echo version;

        devTag  = "${version}-" + currentBuild.number
        artifact = getArtifactIdFromPom(pom)	    	
      }
	    echo "Devtag: ${devTag}"      	
    }
    //end of the checkout stage
    
    
    
    stage('Build App') {
      dir("complete/backend-users"){
      	 echo "Building version ${devTag}"
      	 sh "${mvnCmd} clean install -DskipTests -s ./configuration/settings.xml"
      	 echo "Building complete version ${devTag}"
      }     
    }
    
     //End of the build step
    stage('Unit Tests') {
     dir("complete/backend-users"){      
		  		echo "Running Unit Tests"
		  		sh "${mvnCmd}  test -s ./configuration/settings.xml"
		  }  
    }


    stage('SonarQube Scan') {

      dir("complete/backend-users"){  

        echo "Init Running Code Analysis"
          withSonarQubeEnv('sonar') {
          
              sh "${mvnCmd} sonar:sonar " +
              "-Dsonar.java.coveragePlugin=jacoco -Dsonar.junit.reportsPath=target/surefire-reports  -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml -s ./configuration/settings.xml"
        
          }
        sleep(10)
        
        timeout(time: 1, unit: 'MINUTES') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
        }
        echo "End Running Code Analysis"


      }
    }

        //Public in repository
		stage('Publish to Nexus') {
      dir("complete/backend-users"){   
        echo "Publish to Nexus"
        sh "${mvnCmd}  deploy -DskipTests=true -s ./configuration/settings.xml"
      }
		}


    stage('Create Image'){
      dir("complete/backend-users"){
        echo "Inicia creación image"
        echo devTag
        echo prodTag
        sh "oc start-build ${params.appName} --from-file=./target/backend-users-${version}.jar --wait=true -n ${params.namespace}"
        sh "oc tag ${params.appName}:latest ${params.appName}:${devTag} -n ${params.namespace}"
        echo "Termina creación image"
      }
    }



    stage('Deploy to DEV'){
	    echo "Inicia Deploy"
      sh "oc set image dc/${params.appName} ${params.appName}=${params.namespace}/${params.appName}:${devTag} --source=imagestreamtag -n ${params.namespace}"
      sh "oc rollout latest dc/${params.appName} -n ${params.namespace}"
      
      def dc_version = sh(script:"oc get dc/${params.appName} -o=yaml -n ${params.namespace} | grep 'latestVersion'| cut -d':' -f 2" , returnStdout:true).trim();
      echo "Version de DeploymentConfig Actual ${dc_version}"
      
      def rc_replicas = sh(returnStdout: true, script: "oc get rc/${params.appName}-${dc_version} -o yaml -n ${params.namespace} |grep -A 5  'status:' |grep 'replicas:' | cut -d ':' -f2").trim()
      def rc_replicas_ready = sh(returnStdout: true, script: "oc get rc/${params.appName}-${dc_version} -o yaml -n ${params.namespace} |grep -A 5  'status:' |grep 'readyReplicas:' | cut -d ':' -f2").trim()

	    echo "Replicas Deseadas ${rc_replicas} - Replicas Listas ${rc_replicas_ready}"
	  
	  
	  
	    def countIterMax=20
	    def countInterActual=0

      while ((rc_replicas != rc_replicas_ready)&&countInterActual <=countIterMax) {
			  sleep 5

        rc_replicas = sh(returnStdout: true, script: "oc get rc/${params.appName}-${dc_version} -o yaml -n ${params.namespace} |grep -A 5  'status:' |grep 'replicas:' | cut -d ':' -f2").trim()
				rc_replicas_ready = sh(returnStdout: true, script: "oc get rc/${params.appName}-${dc_version} -o yaml -n ${params.namespace} |grep -A 5  'status:' |grep 'readyReplicas:' | cut -d ':' -f2").trim()

        echo "Replicas Deseadas ${rc_replicas} - Replicas Listas ${rc_replicas_ready}"

        countInterActual = countInterActual + 1
				echo "Iteracion Actual: "+countInterActual
				if (countInterActual>countIterMax){
				  echo "Se ha superado el tiempo de espera para el despliegue"
					echo "Se procede a cancelar el despliegue y a mantener la última versión estable"
					sh "oc rollout cancel dc/${params.appName}s -n ${params.namespace}"
					throw new Exception("Se ha superado el tiempo de espera para el despliegue")
				}
        echo "Termina Deploy"  
      }  
    }
  }
}

// Convenience Functions to read variables from the pom.xml
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}