// Jenkinsfile for Api-users - 
// Set the tag for the development image: version + build number
def devTag      = "0.0-0"

// Set the tag for the production image: version
def prodTag     = "0.0"
def artifact	= ""
def destApp = "" 
def activeApp = ""

podTemplate(
  label: "maven-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/jenkins/jenkins-agent-maven-35-rhel7",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "1"
    )
  ]
) 

{
  node('maven-pod') {
    echo "Api Users Pipeline Start"
    
    // Checkout Source Code
    stage('Checkout Source') {
     
	  checkout scm
	  
	  dir("backend-users"){
	  	def pom = 'pom.xml'
      	def version = getVersionFromPom(pom)

        echo version;

      	// TBD: Set the tag for the development image: version + build number.
      	// Example: def devTag  = "0.0-0"
      	devTag  = "${version}-" + currentBuild.number
      	// TBD: Set the tag for the production image: version
      	// Example: def prodTag = "0.0"
      	prodTag = "${version}"
	  	artifact = getArtifactIdFromPom(pom)	    	
	  }
	  
	    
	  echo "Devtag: ${devTag}"      	
    }
    //end of the checkout stage
    
    
    
    stage('Build App') {
      dir("backend-users"){
      	 echo "Building version ${devTag}"
      	 sh "mvn clean install -DskipTests -s ./configuration/settings.xml"
      	 echo "Building complete version ${devTag}"
      }     
    }
    
     //End of the build step
    stage('Unit Tests') {
     dir("backend-users"){      
		  		echo "Running Unit Tests"
		  		sh "mvn  test -s ./configuration/settings.xml"
		  }  
    }


    stage('SonarQube Scan') {

      dir("backend-users"){  
			echo "Init Running Code Analysis"
  			sh "mvn sonar:sonar -Dsonar.host.url=http://docker-openshift-sonarqube-sonarqube.apps.na311.openshift.opentlc.com/ -Dsonar.login=38f6d6a58bc609123055e6b88912c84e8253a1b4 " +
  					"-Dsonar.java.coveragePlugin=jacoco -Dsonar.junit.reportsPath=target/surefire-reports -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml -s ./configuration/settings.xml"
  		}

			sleep(10)
      
      timeout(time: 1, unit: 'HOURS') {
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
      }

		
      echo "End Running Code Analysis"
    }

        //Public in repository
		stage('Publish to Nexus') {
			echo "Publish to Nexus"
			sh "mvn  deploy -DskipTests=true  -s ./configuration/settings.xml "
			
		}
    
    
 }
}

// Convenience Functions to read variables from the pom.xml
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}