// Jenkinsfile for Api-users - 
// Set the tag for the development image: version + build number
def devTag      = "0.0-0"

// Set the tag for the production image: version
def prodTag     = "0.0"
def version
def artifact	= ""
def destApp = "" 
def activeApp = ""

node() {
  properties([
      parameters(
          [
            string(name: 'namespace', defaultValue: 'dev-admin-users', description:'Nombre del proyecto en Openshift'),
            string(name: 'appName', defaultValue: 'api-users', description:'Application name')
          ]
        )
  ])

  echo "Namespace: ${params.namespace}"
  echo "Application name: ${params.appName}"


  stage('Preparing'){
		mvnHome = tool 'M2'

		// Define Maven Command. Make sure it points to the correct
		// settings for our Nexus installation (use the service to
		// bypass the router). The file settings.xml
		// needs to be in the Source Code repository.

		mvnCmd = "${mvnHome}/bin/mvn "


		env.JAVA_HOME=tool 'JDK18'
		env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"
		sh 'java -version'

	}
    
    
  // Checkout Source Code
  stage('Checkout Source') {
	  checkout scm  
    dir("backend-users"){
      def pom = 'pom.xml'
      version = getVersionFromPom(pom)
      echo version;

      devTag  = "${version}-" + currentBuild.number
      artifact = getArtifactIdFromPom(pom)	    	
    }
	  echo "Devtag: ${devTag}"      	
  }
  //end of the checkout stage


  stage('Build App') {
    dir("backend-users"){
      echo "Building version ${devTag}"
      sh "${mvnCmd} clean install -DskipTests -s ./configuration/settings_maven.xml"
      echo "Building complete version ${devTag}"
    }     
  }
    
  //End of the build step
  stage('Unit Tests') {
    dir("backend-users"){      
			echo "Running Unit Tests"
  		sh "${mvnCmd}  test -s ./configuration/settings_maven.xml"
	  }  
  }
}
// Convenience Functions to read variables from the pom.xml
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}